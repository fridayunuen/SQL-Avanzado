-- Consultas correlacionales
/*Determina si un valor especificado coincide con cualquier valor en una subconsulta o una lista.
Sintaxis:

test_expression [ NOT ] IN
( subquery | expression [ ,...n ]
)

1)test_expression: Es cualquier expresión válida.
2)Subquery: Es una subconsulta que tiene un conjunto de resultados de una columna. Esta columna debe
tener el mismo tipo de datos que test_expression.
3)expression [ ,...n ]: Es una lista de expresiones para probar una coincidencia. Todas las expresiones deben
ser del mismo tipo que test_expression.
*/

-- De la base de datos trabajo buscar los nombres de los empleados que son design engineers, tool designers, o marketing assistants.

USE AdventureWorks2019;
GO
SELECT p.FirstName, p.LastName, e.JobTitle
FROM Person.Person AS p
JOIN HumanResources.Employee AS e
ON p.BusinessEntityID = e.BusinessEntityID
WHERE e.JobTitle = 'Design Engineer'
OR e.JobTitle = 'Tool Designer'
OR e.JobTitle = 'Marketing Assistant';

--IN -----------------------------------------------------------------------------------------------------
SELECT p.FirstName, p.LastName, e.JobTitle
FROM Person.Person AS p
JOIN HumanResources.Employee AS e
ON p.BusinessEntityID = e.BusinessEntityID
WHERE e.JobTitle IN ('Design Engineer', 'Tool Designer', 'Marketing Assistant');


-- De la base de datos trabajo buscar los nombres de los empleados de una lista.
SELECT FirstName, LastName
FROM Person.Person
WHERE FirstName IN ('Gustavo','Adriana','Pedro');


-- De la base de datos trabajo buscar los nombres de los empleados que tienen ventas superiores a 250 000.
SELECT p.FirstName, p.LastName
FROM Person.Person AS p
JOIN Sales.SalesPerson AS sp
ON p.BusinessEntityID = sp.BusinessEntityID
WHERE p.BusinessEntityID IN
(SELECT BusinessEntityID
FROM Sales.SalesPerson
WHERE Salesytd > 250000);

-- NOT IN ---------------------------------------------------------------------------------------------------
-- De la base de datos trabajo buscar los nombres de los empleados que no tienen ventas superiores a 250 000.

SELECT p.FirstName, p.LastName
FROM Person.Person AS p
JOIN Sales.SalesPerson AS sp
ON p.BusinessEntityID = sp.BusinessEntityID
WHERE p.BusinessEntityID NOT IN
(SELECT BusinessEntityID
FROM Sales.SalesPerson
WHERE SalesQuota > 250000);


-- Consultas correlacionales (Usar IN con una lista de expresiones)----------------------------------------
-- De la base de datos trabajo buscar los nombres de los empleados que no tienen ventas superiores a 250 000.
SELECT FirstName, LastName
FROM Person.Person
WHERE FirstName IN ('Gustavo','Adriana','Pedro');

-- Subconsultas
/* Una subconsulta es una consulta anidada en una instrucción SELECT, INSERT, UPDATE o DELETE, o en otra
subconsulta.*/

SELECT ProductID, Name
FROM Production.Product
WHERE ProductID IN
(SELECT ProductID
FROM Sales.SalesOrderDetail
GROUP BY ProductID
HAVING SUM(OrderQty) >= 5500)

-- ANY -----------------------------------------------------------------------------------------------------
-- Obtener BusinessEntityID, Nombre completo, Correo electrónico, Teléfono y 'Ventas Último año' siempre que las
-- ventas sean mayores a $ 1,500,000.

SELECT s.BusinessEntityID, (FirstName+' '+Lastname) Nombre,
EmailAddress Correo, f.PhoneNumber Teléfono,
FORMAT (ROUND(s.SalesLastYear,0 ), 'C','En-Us' ) 'Ventas Último año'
FROM Person.Person p
INNER JOIN Person.EmailAddress a
ON (p.BusinessEntityID = a.BusinessEntityID)
INNER JOIN Person.PersonPhone f
ON (p.BusinessEntityID = f.BusinessEntityID)
INNER JOIN Sales.SalesPerson s
ON (p.BusinessEntityID = s.BusinessEntityID)
WHERE p.BusinessEntityID = ANY
(SELECT BusinessEntityID
FROM Sales.SalesPerson
WHERE SalesLastYear >= 1500000)
ORDER BY SalesLastYear DESC;

-- ALL -----------------------------------------------------------------------------------------------------------
-- Obtener la lista de productos (Name) cuyo precio de lista (ListPrice) es mayor que el precio promedio de los
-- productos, considere que el Id de la subcategoría (ProductSubcategoryID) de producto no debe ser NULL .

SELECT Name, ListPrice
FROM Production.Product
WHERE ListPrice > ALL
(SELECT AVG(ListPrice) 'Precio promedio'
FROM Production.Product
WHERE ProductSubcategoryID IS NOT NULL
GROUP BY ProductSubcategoryID)
ORDER BY ListPrice DESC;

-- EXIST---------------------------------------------------------------------------------------------------------
-– Busca los nombres de personas con apellido 'Johnson'
SELECT a.FirstName, a.LastName
FROM Person.Person a
WHERE EXISTS
(SELECT *
FROM HumanResources.Employee b
WHERE a.BusinessEntityID = b.BusinessEntityID
AND a.LastName = 'Johnson');

-- Obtener la lista (Nombre) de los cliente que han hecho al menos 5 pedidos.
SELECT DepartmentID, Name
FROM HumanResources.Department
WHERE EXISTS (SELECT NULL)
ORDER BY Name ASC ;

SELECT CustomerID, (p.FirstName +' ' + p.LastName) Nombre
FROM Sales.Customer c
JOIN Person.Person p
ON c.CustomerID = p.BusinessEntityID
WHERE EXISTS
(SELECT COUNT (*)
FROM sales.SalesOrderHeader o
WHERE o.CustomerID = c.CustomerID
GROUP BY CustomerID
HAVING COUNT (*) >= 5)
ORDER BY FirstName, LastName;

-- Obtener la lista (Nombre) y puesto de trabajo de los empleados que pertenecen al departamento (GroupName) de ‘Executive General and Administration’
SELECT (p.FirstName+' '+ p.LastName) Nombre, e.JobTitle
FROM Person.Person p
JOIN HumanResources.Employee e
ON e.BusinessEntityID = p.BusinessEntityID
WHERE EXISTS
(SELECT *
FROM HumanResources.Department d
JOIN HumanResources.EmployeeDepartmentHistory he
ON d.DepartmentID = he.DepartmentID
WHERE d.GroupName LIKE 'Exe%')
ORDER BY e.JobTitle
